/*------------------------------------*\
  #FORM

    - All styles related to form elements: inputs, textarea, select, checkbox, radio

\*------------------------------------*/



// Normalize non-controls
// Restyle and baseline non-control form elements.
fieldset {
    // Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    // See https://github.com/twbs/bootstrap/issues/12359.
    min-width: 0;
    padding: 0;
    margin: 0;
    border: 0;
}

legend {
    display: block;
    width: 100%;
    padding: 0;
    margin-bottom: @line-height-computed;
    font-size: (@font-size-base * 1.5);
    line-height: inherit;
    color: @legend-color;
    border: 0;
    border-bottom: 1px solid @legend-border-color;
}

label {
    display: inline-block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-control {
    //.box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
    //.transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");
    .transition(~"border-color ease-in-out .15s");
    // Customize the `:focus` state to imitate native WebKit styles.
    .form-control-focus();
    // Placeholder
    .placeholder();

    display: block;
    width: 100%;
    height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: @padding-base-vertical @padding-base-horizontal;
    font-size: @font-size-base;
    line-height: @line-height-base;
    color: @input-color;
    background-color: @input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid @input-border;
    border-radius: @input-border-radius;
    box-shadow: none;

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        cursor: not-allowed;
        background-color: @input-bg-disabled;
        opacity: 1; // iOS fix for unreadable disabled content
    }
    &:focus {
        border-color: inherit;
        -webkit-box-shadow: none;
                box-shadow: none;
    }
}



// Checkboxes and radios
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
    display: block;
    min-height: @line-height-computed; // clear the floating input if there is no label text
    padding-left: 20px;
    margin-top: 10px;
    margin-bottom: 10px;
    label {
        display: inline;
        font-weight: normal;
        cursor: pointer;
    }
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    float: left;
    margin-left: -20px;
}

.radio + .radio,
.checkbox + .checkbox {
    margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
    display: inline-block;
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    vertical-align: middle;
    cursor: pointer;
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
    margin-top: 0;
    margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"],
.radio,
.radio-inline,
.checkbox,
.checkbox-inline {
    &[disabled],
    fieldset[disabled] & {
        cursor: not-allowed;
    }
}

/***** custom checkbox ************/
input[type=checkbox].custom-checkbox {
    z-index: -1000;
    display: none;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    border: 0;
}

label.custom-checkbox-label {
    position: relative;
    display: inline-block;
    padding-left: 30px;
    margin-right: 1em;
    font-weight: normal;
    line-height: 20px;
    cursor: pointer;
}

label.custom-checkbox-label:after {
    position: absolute;
    top: 0;
    left: 0;
    width: 21px;
    height: 20px;
    vertical-align: middle;
    content: "";
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
    background-image: url(https://plmp-assets-prod.s3.amazonaws.com/_default_assets/images/sprite-general-icons.png);
    background-repeat: no-repeat;
    background-position: 0 -260px;

    -webkit-touch-callout: none;
     -khtml-user-select: none;
}

input[type=checkbox].custom-checkbox:checked + label.custom-checkbox-label:after {
    background-position: 0 -280px;
}

/***** custom radio ************/
input[type=radio].custom-radio {
    position: absolute;
    z-index: -1000;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    border: 0;
}

label.custom-radio-label {
    position: relative;
    display: inline-block;
    padding-left: 30px;
    margin-right: 1em;
    font-weight: normal;
    line-height: 20px;
    vertical-align: middle;
    cursor: pointer;
}

label.custom-radio-label:after {
    position: absolute;
    top: 0;
    left: 0;
    width: 22px;
    height: 20px;
    content: "";
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
    background-image: url(https://plmp-assets-prod.s3.amazonaws.com/_default_assets/images/sprite-general-icons.png);
    background-repeat: no-repeat;
    background-position: 0 -220px;

    -webkit-touch-callout: none;
     -khtml-user-select: none;
}

input[type=radio].custom-radio:checked + label.custom-radio-label:after {
    background-position: 0 -240px;
}
